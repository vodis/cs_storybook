/* You can add global styles to this file, and also import other style files */
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$cs_ng_app_client-primary: mat.define-palette(mat.$orange-palette, 900);
$cs_ng_app_client-accent: mat.define-palette(
  mat.$pink-palette,
  A200,
  A100,
  A400
);

// The warn palette is optional (defaults to red).
$cs_ng_app_client-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$cs_ng_app_client-theme: mat.define-light-theme(
  (
    color: (
      primary: $cs_ng_app_client-primary,
      accent: $cs_ng_app_client-accent,
      warn: $cs_ng_app_client-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($cs_ng_app_client-theme);

// Global Styles
*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  position: static;
}

body {
  margin: 0;
  background: var(--main-bg-color);
  color: var(--main-text-color);
  // antialiasing for the fonts
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

p {
  margin: 0;
}

input[type='number']::-webkit-outer-spin-button,
input[type='number']::-webkit-inner-spin-button {
  margin: 0;
  appearance: none;
}

input[type='number'] {
  appearance: textfield;
}

button,
a {
  cursor: pointer;
}
